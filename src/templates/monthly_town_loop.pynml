<!--! monthly callback is used to influence town behaviour depending on cargo delivered
      currently included with production behaviour template as it's closely related -->
switch(FEAT_INDUSTRIES, SELF, count_industries_in_town,
    [
        <tal:industries_in_town repeat="industry registered_industries">
            industry_town_count(${industry.numeric_id}) +
        </tal:industries_in_town>
        1 <!--! seems industry_town_count filters out current instance so add 1? -->
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, increment_town_monthly_cycle_industry_counter,
    [
        STORE_PERM_TOWN(
            ${get_perm_num("this_cycle_industry_counter")},
            LOAD_PERM_TOWN(${get_perm_num("this_cycle_industry_counter")}) + 1
        )
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, reset_town_monthly_cycle_industry_counter,
    [
        STORE_PERM_TOWN(
            ${get_perm_num("this_cycle_industry_counter")},
            0
        )
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, rollover_next_and_current_optimism_scores,
    [
        STORE_PERM_TOWN(
            ${get_perm_num("current_optimism_score")},
            LOAD_PERM_TOWN(${get_perm_num("next_optimism_score")})
        )
        ,
        STORE_PERM_TOWN(
            ${get_perm_num("next_optimism_score")},
            0
        )
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, town_monthly_cycle_complete,
    [
        rollover_next_and_current_optimism_scores(),
        reset_town_monthly_cycle_industry_counter()
    ]) {
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, check_if_town_monthly_cycle_complete,
    [
        LOAD_PERM_TOWN(${get_perm_num("this_cycle_industry_counter")}) == count_industries_in_town()
    ]) {
    1: return town_monthly_cycle_complete;
    return 0;
}

switch(FEAT_INDUSTRIES, SELF, contribute_to_town_optimism, optimism_score,
    [
        STORE_PERM_TOWN(
            ${get_perm_num("next_optimism_score")},
            LOAD_PERM_TOWN(${get_perm_num("next_optimism_score")}) + optimism_score
        ),
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, monthly_town_loop, optimism_score,
    [
        contribute_to_town_optimism(optimism_score),
        increment_town_monthly_cycle_industry_counter(),
        <!--! temp debugging to industry 63 and 64 -->
        STORE_PERM_ALT(
            63,
            LOAD_PERM_TOWN(${get_perm_num("this_cycle_industry_counter")})
        ),
        STORE_PERM_ALT(
            64,
            count_industries_in_town()
        ),
        check_if_town_monthly_cycle_complete(),
        <!--! seem to have to store temp if we want to store the value of the town storage?
              maybe can't use a procedure as an argument to another parameterised procedure?
              it's a bug in nml
              see https://gist.github.com/andythenorth/df51f3b8fa7bce212a87604702fb836c
              and fix in https://github.com/OpenTTD/nml/pull/227
              -->
        <!--!
        STORE_PERM_ALT(62, LOAD_PERM_TOWN(${get_perm_num("test")})),
        STORE_TEMP(LOAD_PERM_TOWN(${get_perm_num("test")}), 10),
        STORE_PERM_ALT(63, LOAD_TEMP(10))-->
    ]) {
    return CB_RESULT_IND_PROD_NO_CHANGE;
}
