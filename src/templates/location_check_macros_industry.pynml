<!--!
    Location checks are defined as macros, to use these load the template as an object and call the macro from the macros dict
    e.g. foo.macros[macro_name] where foo has been loaded in a python script or in a chameleon template
-->

<!--! Loop to render the location checks tree -->

<metal:render_tree metal:define-macro="render_tree">
    <tal:location_checks_industry repeat="location_check industry.location_checks.get_render_tree(incompatible_industries)">
        switch (FEAT_INDUSTRIES, SELF, ${location_check.switch_entry_point},
            location_check_industry_${location_check.macro_name}(${location_check.params_as_nml_string})) {
            1: ${location_check.switch_result};
            return CB_RESULT_LOCATION_DISALLOW;
        }
    </tal:location_checks_industry>
    <!--!
        Check whether a certain location is suitable for building the industry
        Restrictions apply only to industries funded by the game.
        founder == FOUNDER_GAME means founded by the game, 0 .. 15 are player companies.
        *Alway* allow player to found industries (tile location checks still apply).
    -->
    switch (FEAT_INDUSTRIES, SELF,${industry.id}_check_location, (
                (extra_callback_info2 == IND_CREATION_FUND) ||
                (extra_callback_info2 == IND_CREATION_PROSPECT)
                )
            ) {
        1: return CB_RESULT_LOCATION_ALLOW;
        ${industry.id}_check_location_tree_entry_point;
    }
</metal:render_tree>
