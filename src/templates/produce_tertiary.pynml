<!--! Tertiary production behaviour is relatively simple -->

<tal:economies repeat="economy industry.economies_enabled_for_industry">
    <!--! clear any delivered cargo immediately on arrival -->
    produce (${industry.id}_produce_cargo_arrival_economy_${economy.numeric_id},
        [
            <tal:subtract repeat="cargo industry.get_property('accept_cargo_types', economy)">
                ${cargo}: incoming_cargo_waiting("${cargo}");
            </tal:subtract>
        ],
        [<!--! no production when cargo arrives -->],
    0)
    <!--! some tertiaries also produce, assumed to be on a regular interval (256 ticks) -->
    <tal:has_production condition="industry.has_production">
        produce(${industry.id}_production_256_economy_${economy.numeric_id},
            [<!--! no accept in 256 cb -->],
            [
                <tal:produce repeat="cargo industry.get_prod_cargo_types(economy)">
                    <!--!
                          simply replicates default ottd prod. algorithm but in prod. cb, so action 0 prod. properties can be set 0
                          prod. cb is used consistently in FIRS, to reduce the number of different prod. methods in use
                          calculation is (cargo amount * production_level * base_prod_factor) / (default production_level * default base_prod_factor)
                          base_prod_factor is randomised at start (default 16), so that production_level can be used separately for cheats and monthly/random prod changes
                    -->
                    ${cargo[0]}: (${cargo[1]} * production_level * LOAD_PERM(${get_perm("base_prod_factor")})) / (16 * 16);
                </tal:produce>
            ],
        0)
    </tal:has_production>
</tal:economies>
<!--! end production behaviour -->

